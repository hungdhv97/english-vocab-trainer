services:
  frontend:
    image: node:20-alpine
    working_dir: /app
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    volumes:
      - ./frontend:/app
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
    ports:
      - "8180:8180"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app

  # Unified Ngrok service for both backend and frontend
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command: ["start", "--all", "--log", "stdout", "--config", "/etc/ngrok.yml"]
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    env_file:
      - .env
    depends_on:
      - backend
      - frontend

  postgres:
    image: bitnami/postgresql:latest
    ports:
      - "5434:5432"
    environment:
      POSTGRESQL_USERNAME: user
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_DATABASE: vocab
    volumes:
      - postgres_data:/bitnami/postgresql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d vocab -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: bitnami/redis:latest
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: password
    volumes:
      - redis_data:/bitnami/redis
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
